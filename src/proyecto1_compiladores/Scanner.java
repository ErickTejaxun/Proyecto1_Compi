package proyecto1_compiladores;

/* The following code was generated by JFlex 1.6.0 */


import java_cup.runtime.Symbol;
import java.util.ArrayList;
/*
Directivas:
public: clase publica
cup: compatibilidad con cup
full: extender el alfabeto con todos los valores de 8 bits
line: agrega la variable int yyline, para indicar la fila del lexema
char: agrega la variable int yychar, indica el indice del primer caracter del lexema
ignorecase: validar, indistitntamente si la letra es mayuscula o minuscula
eofval: especifica un valor de retorno al final del archivo
*/

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  3, 48,  1,  2,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  0,  6,  0,  0,  0,  0,  0, 40, 41,  0,  0, 42, 32, 47, 10, 
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  8, 43, 11, 46, 23,  0, 
     0, 21, 24, 12, 27, 28, 15, 18, 38, 17, 39, 26, 36, 33, 14, 13, 
    35, 37, 20, 30, 22, 19, 34,  5, 31,  5,  5,  0,  9,  0,  0,  7, 
     0, 21, 24, 12, 27, 28, 15, 18, 38, 17, 39, 26, 36, 33, 14, 13, 
    35, 37, 20, 30, 22, 19, 34,  5, 31,  5,  5, 44,  0, 45,  0,  0, 
     0,  0,  0,  0,  0, 48,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\5\1\11\3\5\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\5\1\0\1\22\13\0"+
    "\3\5\1\0\1\5\30\0\3\5\1\0\1\5\13\0"+
    "\1\23\31\0\1\5\1\24\1\0\1\5\1\0\1\5"+
    "\45\0\1\25\1\0\1\5\1\0\1\5\41\0\1\26"+
    "\5\0\1\5\1\0\1\5\3\0\1\27\1\30\6\0"+
    "\1\31\1\32\11\0\1\33\6\0\1\34\1\35\10\0"+
    "\1\5\1\0\1\5\3\0\1\36\1\37\4\0\1\40"+
    "\2\0\1\41\1\42\11\0\1\43\1\0\1\44\1\45"+
    "\3\0\1\46\1\0\1\5\1\0\1\5\1\0\1\47"+
    "\1\50\1\51\4\0\1\52\1\0\1\53\1\0\1\54"+
    "\3\0\1\55\3\0\1\56\2\0\1\5\1\0\1\5"+
    "\3\0\1\57\4\0\1\60\3\0\1\61\1\0\2\62"+
    "\2\63\1\64\1\0\1\65\3\0\1\66\7\0\1\67"+
    "\2\0\1\70\1\71\2\0\1\72\1\73\1\0\1\74"+
    "\3\0\1\75\1\76";

  private static int [] zzUnpackAction() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\61\0\61\0\142\0\223\0\61\0\304"+
    "\0\365\0\u0126\0\61\0\u0157\0\u0188\0\u01b9\0\61\0\61"+
    "\0\61\0\61\0\61\0\61\0\61\0\61\0\u01ea\0\u021b"+
    "\0\304\0\u024c\0\u027d\0\u02ae\0\u02df\0\u0310\0\u0341\0\u0372"+
    "\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467\0\u0498\0\u04c9\0\u04fa"+
    "\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef\0\u0620\0\u0651\0\u0682"+
    "\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9\0\u080a"+
    "\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961\0\u0992"+
    "\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a"+
    "\0\u0e5b\0\u0e8c\0\u0ebd\0\u0eee\0\u0f1f\0\u0f50\0\u0f81\0\u0fb2"+
    "\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109\0\u113a"+
    "\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u01ea\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419"+
    "\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\u18e2\0\u1913\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u01ea\0\u1a08"+
    "\0\u1a39\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90"+
    "\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028"+
    "\0\u2059\0\u208a\0\u20bb\0\u20ec\0\61\0\u211d\0\u214e\0\u217f"+
    "\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307"+
    "\0\61\0\61\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u242d"+
    "\0\61\0\61\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553"+
    "\0\u2584\0\u25b5\0\u25e6\0\61\0\u2617\0\u2648\0\u2679\0\u26aa"+
    "\0\u26db\0\u270c\0\61\0\61\0\u273d\0\u276e\0\u279f\0\u27d0"+
    "\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958"+
    "\0\u2989\0\u29ba\0\61\0\61\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e"+
    "\0\61\0\u2aaf\0\u2ae0\0\61\0\61\0\u2b11\0\u2b42\0\u2b73"+
    "\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99\0\61\0\u2cca"+
    "\0\61\0\61\0\u2cfb\0\u2d2c\0\u2d5d\0\61\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\61\0\61\0\61\0\u2e83\0\u2eb4"+
    "\0\u2ee5\0\u2f16\0\61\0\u2f47\0\61\0\u2f78\0\61\0\u2fa9"+
    "\0\u2fda\0\u300b\0\61\0\u303c\0\u306d\0\u309e\0\61\0\u30cf"+
    "\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226\0\61"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\61\0\u331b\0\u334c\0\u337d"+
    "\0\61\0\u33ae\0\61\0\u01ea\0\61\0\u01ea\0\61\0\u33df"+
    "\0\61\0\u3410\0\u3441\0\u3472\0\61\0\u34a3\0\u34d4\0\u3505"+
    "\0\u3536\0\u3567\0\u3598\0\u35c9\0\61\0\u35fa\0\u362b\0\61"+
    "\0\61\0\u365c\0\u368d\0\61\0\61\0\u36be\0\61\0\u36ef"+
    "\0\u3720\0\u3751\0\61\0\61";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\5\1\6\1\7\3\2\1\10"+
    "\1\11\4\6\1\2\4\6\1\12\1\6\1\13\1\14"+
    "\1\2\2\6\1\15\1\2\1\6\1\16\1\2\7\6"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\66\0\1\5\60\0\2\27\1\0\1\27\1\30\3\0"+
    "\4\27\1\0\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\7\27\11\0\2\31\2\0\2\31\1\0"+
    "\2\31\1\0\47\31\12\0\1\32\1\0\1\33\2\0"+
    "\1\34\5\0\1\35\2\0\1\36\2\0\1\37\1\40"+
    "\4\0\1\41\1\42\1\43\2\0\1\44\16\0\2\27"+
    "\1\0\1\27\1\30\3\0\2\27\1\45\1\27\1\0"+
    "\6\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\3\27\1\46\3\27\15\0\2\27\1\0\1\27\1\30"+
    "\3\0\4\27\1\0\4\27\1\47\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\7\27\15\0\2\27"+
    "\1\0\1\27\1\30\3\0\4\27\1\0\6\27\1\0"+
    "\1\27\1\0\3\27\1\50\1\51\1\27\1\0\7\27"+
    "\15\0\2\27\1\0\1\27\1\30\3\0\4\27\1\0"+
    "\6\27\1\0\1\27\1\0\3\27\1\0\2\27\1\52"+
    "\7\27\15\0\2\27\1\0\1\27\4\0\4\27\1\0"+
    "\6\27\1\0\1\27\1\0\3\27\1\0\2\27\1\0"+
    "\7\27\22\0\1\53\63\0\1\54\2\0\1\55\5\0"+
    "\1\56\2\0\1\57\2\0\1\60\1\61\4\0\1\62"+
    "\1\63\1\64\2\0\1\65\27\0\1\66\63\0\2\67"+
    "\63\0\1\70\51\0\1\71\7\0\1\72\67\0\1\73"+
    "\63\0\1\74\55\0\1\75\44\0\2\76\64\0\1\77"+
    "\6\0\1\100\60\0\1\101\30\0\2\27\1\0\1\27"+
    "\4\0\1\102\3\27\1\0\6\27\1\0\1\27\1\0"+
    "\3\27\1\0\2\27\1\0\7\27\15\0\2\27\1\0"+
    "\1\27\4\0\4\27\1\0\5\27\1\103\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\7\27\15\0\2\27"+
    "\1\0\1\27\4\0\1\104\3\27\1\0\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\7\27\25\0"+
    "\1\105\50\0\2\27\1\0\1\27\4\0\1\106\3\27"+
    "\1\0\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\25\0\1\107\1\0\1\110\1\0\2\111"+
    "\3\0\1\112\1\113\1\0\1\114\2\0\1\115\1\116"+
    "\4\0\1\117\1\120\3\0\1\121\12\0\2\122\2\0"+
    "\2\122\1\0\2\122\1\0\47\122\15\0\1\123\63\0"+
    "\2\124\63\0\1\125\51\0\1\126\7\0\1\127\67\0"+
    "\1\130\61\0\2\131\1\132\55\0\1\133\44\0\2\134"+
    "\64\0\1\135\6\0\1\136\60\0\1\137\42\0\1\140"+
    "\64\0\1\141\77\0\1\142\35\0\1\143\56\0\1\144"+
    "\101\0\2\145\50\0\1\146\60\0\1\147\76\0\1\150"+
    "\40\0\1\151\60\0\1\152\60\0\1\153\40\0\2\27"+
    "\1\0\1\27\4\0\4\27\1\0\6\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\5\27\1\154\1\27"+
    "\15\0\2\27\1\0\1\27\4\0\1\27\1\155\2\27"+
    "\1\0\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\15\0\2\27\1\0\1\27\4\0\4\27"+
    "\1\0\6\27\1\0\1\27\1\156\1\157\2\27\1\0"+
    "\2\27\1\0\7\27\45\0\1\160\30\0\2\27\1\0"+
    "\1\27\4\0\4\27\1\0\6\27\1\0\1\27\1\0"+
    "\2\27\1\161\1\0\2\27\1\0\7\27\35\0\1\162"+
    "\51\0\1\163\104\0\1\164\43\0\1\165\54\0\2\166"+
    "\54\0\1\167\26\0\1\170\50\0\1\171\42\0\1\172"+
    "\76\0\1\173\44\0\2\174\73\0\1\175\24\0\2\122"+
    "\2\0\2\122\1\0\2\122\1\53\47\122\16\0\1\176"+
    "\64\0\1\177\77\0\1\200\35\0\1\201\56\0\1\202"+
    "\101\0\2\203\36\0\1\204\72\0\1\205\60\0\1\206"+
    "\76\0\1\207\40\0\1\210\60\0\1\211\60\0\1\212"+
    "\53\0\1\213\64\0\1\214\62\0\1\215\56\0\1\216"+
    "\66\0\2\217\46\0\2\220\63\0\1\221\61\0\1\222"+
    "\77\0\1\223\50\0\1\224\61\0\2\225\37\0\1\226"+
    "\47\0\2\27\1\0\1\27\4\0\1\27\1\227\2\27"+
    "\1\0\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\33\0\1\230\42\0\2\27\1\0\1\27"+
    "\4\0\4\27\1\0\1\27\1\231\4\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\7\27\27\0\1\232"+
    "\46\0\2\27\1\0\1\27\4\0\2\27\1\233\1\27"+
    "\1\0\6\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\45\0\1\234\65\0\1\235\44\0\1\236"+
    "\74\0\1\237\62\0\1\240\33\0\1\241\22\0\1\242"+
    "\34\0\1\243\100\0\2\244\56\0\1\245\52\0\1\246"+
    "\65\0\1\247\51\0\1\250\53\0\1\251\64\0\1\252"+
    "\62\0\1\253\56\0\1\254\66\0\2\255\46\0\2\256"+
    "\73\0\1\257\50\0\1\260\61\0\1\261\77\0\1\262"+
    "\50\0\1\263\61\0\2\264\37\0\1\265\63\0\2\266"+
    "\63\0\1\267\71\0\2\270\57\0\2\271\44\0\1\272"+
    "\60\0\1\273\63\0\1\274\62\0\1\275\56\0\1\276"+
    "\66\0\1\277\42\0\1\300\77\0\1\301\50\0\1\302"+
    "\40\0\2\27\1\0\1\27\4\0\4\27\1\0\3\27"+
    "\1\303\2\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\36\0\1\304\37\0\2\27\1\0\1\27"+
    "\4\0\4\27\1\0\4\27\1\305\1\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\7\27\44\0\1\306"+
    "\55\0\1\307\52\0\1\310\63\0\1\311\50\0\1\312"+
    "\66\0\1\313\65\0\1\314\75\0\1\315\27\0\1\316"+
    "\11\0\1\317\73\0\1\320\44\0\1\321\60\0\1\322"+
    "\50\0\1\323\63\0\2\324\63\0\1\325\71\0\2\326"+
    "\57\0\2\327\44\0\1\330\60\0\1\331\54\0\1\332"+
    "\67\0\1\333\62\0\1\334\56\0\1\335\66\0\1\336"+
    "\42\0\1\337\77\0\1\340\46\0\1\341\72\0\1\342"+
    "\53\0\1\343\60\0\1\344\55\0\1\345\52\0\1\346"+
    "\77\0\2\347\40\0\1\350\76\0\1\351\42\0\1\352"+
    "\77\0\2\353\37\0\1\354\47\0\2\27\1\0\1\27"+
    "\4\0\1\27\1\355\2\27\1\0\6\27\1\0\1\27"+
    "\1\0\3\27\1\0\2\27\1\0\7\27\35\0\1\356"+
    "\40\0\2\27\1\0\1\27\4\0\4\27\1\0\3\27"+
    "\1\357\2\27\1\0\1\27\1\0\3\27\1\0\2\27"+
    "\1\0\7\27\31\0\2\360\63\0\1\361\70\0\1\362"+
    "\61\0\2\363\47\0\1\364\56\0\1\365\61\0\1\366"+
    "\60\0\1\367\54\0\2\370\73\0\1\371\46\0\1\372"+
    "\72\0\1\373\53\0\1\374\60\0\1\375\55\0\1\376"+
    "\52\0\1\377\67\0\1\u0100\70\0\2\u0101\40\0\1\u0102"+
    "\76\0\1\u0103\42\0\1\u0104\77\0\2\u0105\45\0\1\u0106"+
    "\64\0\1\u0107\46\0\1\u0108\72\0\1\u0109\60\0\1\u010a"+
    "\46\0\1\u010b\100\0\2\u010c\47\0\1\u010d\62\0\1\u010e"+
    "\54\0\1\u010f\41\0\2\27\1\0\1\27\4\0\4\27"+
    "\1\0\2\27\1\u0110\3\27\1\0\1\27\1\0\3\27"+
    "\1\0\2\27\1\0\7\27\31\0\2\u0111\43\0\2\27"+
    "\1\0\1\27\4\0\4\27\1\u0111\1\u0112\5\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\7\27\37\0"+
    "\1\u0113\66\0\1\u0114\42\0\1\u0115\76\0\1\u0116\44\0"+
    "\2\u0117\62\0\1\u0118\57\0\1\u0119\61\0\1\u011a\64\0"+
    "\1\u011b\46\0\1\u011c\72\0\1\u011d\55\0\1\u011e\63\0"+
    "\1\u011f\46\0\1\u0120\100\0\2\u0121\47\0\1\u0122\62\0"+
    "\1\u0123\55\0\1\u0124\57\0\1\u0125\72\0\2\u0126\51\0"+
    "\1\u0127\100\0\1\u0128\27\0\1\u0129\46\0\2\27\1\0"+
    "\1\27\4\0\2\27\1\u012a\1\27\1\0\6\27\1\0"+
    "\1\27\1\0\3\27\1\0\2\27\1\0\7\27\26\0"+
    "\1\u012b\47\0\2\27\1\0\1\27\4\0\1\27\1\u012c"+
    "\2\27\1\0\6\27\1\0\1\27\1\0\3\27\1\0"+
    "\2\27\1\0\7\27\26\0\1\u012d\106\0\1\u012e\35\0"+
    "\2\u012f\54\0\1\u0130\67\0\1\u0131\57\0\1\u0132\55\0"+
    "\2\u0133\74\0\2\u0134\51\0\1\u0135\100\0\1\u0136\36\0"+
    "\1\u0137\51\0\1\u0138\71\0\1\u0139\65\0\1\u013a\57\0"+
    "\1\u013b\31\0\2\27\1\0\1\27\4\0\4\27\1\0"+
    "\6\27\1\0\1\27\1\0\1\27\1\u013c\1\27\1\0"+
    "\2\27\1\0\7\27\46\0\2\u013d\26\0\2\27\1\0"+
    "\1\27\4\0\4\27\1\0\6\27\1\0\1\27\1\0"+
    "\3\27\1\u013d\1\u013e\1\27\1\0\7\27\46\0\2\u013f"+
    "\36\0\1\u0140\70\0\1\u0141\61\0\1\u0142\51\0\1\u0143"+
    "\57\0\1\u0144\72\0\1\u0145\65\0\1\u0146\52\0\1\u0147"+
    "\65\0\1\u0148\62\0\2\u0149\42\0\2\u014a\65\0\1\u014b"+
    "\65\0\1\u014c\54\0\1\u014d\66\0\2\u014e\42\0\2\u014f"+
    "\66\0\1\u0150\60\0\1\u0151\46\0\1\u0152\63\0\2\u0153"+
    "\66\0\1\u0154\60\0\1\u0155\46\0\1\u0156\61\0\1\u0157"+
    "\57\0\1\u0158\61\0\1\u0159\60\0\1\u015a\71\0\1\u015b"+
    "\60\0\1\u015c\31\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14210];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\2\1\1\11\3\1\1\11\3\1\10\11"+
    "\1\1\1\0\1\1\13\0\3\1\1\0\1\1\30\0"+
    "\3\1\1\0\1\1\13\0\1\1\31\0\2\1\1\0"+
    "\1\1\1\0\1\1\45\0\1\1\1\0\1\1\1\0"+
    "\1\1\41\0\1\11\5\0\1\1\1\0\1\1\3\0"+
    "\2\11\6\0\2\11\11\0\1\11\6\0\2\11\10\0"+
    "\1\1\1\0\1\1\3\0\2\11\4\0\1\11\2\0"+
    "\2\11\11\0\1\11\1\0\2\11\3\0\1\11\1\0"+
    "\1\1\1\0\1\1\1\0\3\11\4\0\1\11\1\0"+
    "\1\11\1\0\1\11\3\0\1\11\3\0\1\11\2\0"+
    "\1\1\1\0\1\1\3\0\1\11\4\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\1\1\11\1\1\1\11\1\0"+
    "\1\11\3\0\1\11\7\0\1\11\2\0\2\11\2\0"+
    "\2\11\1\0\1\11\3\0\2\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[348];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	public static String urlAuxliar="";
	public static Boolean fin=false;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.out.println("Caracter ilegal: " + yytext()+" Linea : "+yyline +" Columna: "+yychar); 
			Errores errorLexico=new Errores();
			errorLexico.setTipo("Lexico");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("Caracter Ilegal: "+yytext());
			Menu.listaLexico.add(errorLexico);
			Proyecto1_Compiladores.listaLexico.add(errorLexico);
			Menu.listaLexico=Proyecto1_Compiladores.listaLexico;
          }
        case 63: break;
        case 2: 
          { System.out.println("Salto de linea");
          }
        case 64: break;
        case 3: 
          { yychar=0;
          }
        case 65: break;
        case 4: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Numero");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.NUMERO, yychar, yyline, new Integer(yytext()).doubleValue());
          }
        case 66: break;
        case 5: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("ID");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.ID, yychar, yyline, yytext());
          }
        case 67: break;
        case 6: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Comillas, yychar, yyline, yytext());
          }
        case 68: break;
        case 7: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);urlAuxliar+=yytext();
          }
        case 69: break;
        case 8: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Menor, yychar, yyline, yytext());
          }
        case 70: break;
        case 9: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Mayor, yychar, yyline, yytext());
          }
        case 71: break;
        case 10: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AParentesis, yychar, yyline, yytext());
          }
        case 72: break;
        case 11: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CParentesis, yychar, yyline, yytext());
          }
        case 73: break;
        case 12: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Coma, yychar, yyline, yytext());
          }
        case 74: break;
        case 13: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.PuntoComa, yychar, yyline, yytext());
          }
        case 75: break;
        case 14: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.ACorchete, yychar, yyline, yytext());
          }
        case 76: break;
        case 15: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CCorchete, yychar, yyline, yytext());
          }
        case 77: break;
        case 16: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Asignacion");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Asignacion, yychar, yyline, yytext());
          }
        case 78: break;
        case 17: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Simbolo del sistema");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Punto, yychar, yyline, yytext());
          }
        case 79: break;
        case 18: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Path linux");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.URLL, yychar, yyline, yytext());
          }
        case 80: break;
        case 19: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Path windos");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.URLW, yychar, yyline, yytext());
          }
        case 81: break;
        case 20: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Alto, yychar, yyline, yytext());
          }
        case 82: break;
        case 21: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Ancho, yychar, yyline, yytext());
          }
        case 83: break;
        case 22: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AMeta2, yychar, yyline, yytext());
          }
        case 84: break;
        case 23: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Arma, yychar, yyline, yytext());
          }
        case 85: break;
        case 24: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Tipo, yychar, yyline, yytext());
          }
        case 86: break;
        case 25: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Meta, yychar, yyline, yytext());
          }
        case 87: break;
        case 26: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Vida, yychar, yyline, yytext());
          }
        case 88: break;
        case 27: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CMeta2, yychar, yyline, yytext());
          }
        case 89: break;
        case 28: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AArmas2, yychar, yyline, yytext());
          }
        case 90: break;
        case 29: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.ABonus2, yychar, yyline, yytext());
          }
        case 91: break;
        case 30: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Bonus, yychar, yyline, yytext());
          }
        case 92: break;
        case 31: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Bomba, yychar, yyline, new String(yytext()));
          }
        case 93: break;
        case 32: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Heroe, yychar, yyline, yytext());
          }
        case 94: break;
        case 33: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CArmas2, yychar, yyline, yytext());
          }
        case 95: break;
        case 34: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CBonus2, yychar, yyline, yytext());
          }
        case 96: break;
        case 35: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.APersonaje, yychar, yyline, yytext());
          }
        case 97: break;
        case 36: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AElemento, yychar, yyline, yytext());
          }
        case 98: break;
        case 37: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AExtras2, yychar, yyline, yytext());
          }
        case 99: break;
        case 38: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AHeroe2, yychar, yyline, yytext());
          }
        case 100: break;
        case 39: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Nombre, yychar, yyline, yytext());
          }
        case 101: break;
        case 40: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Imagen, yychar, yyline, yytext());
          }
        case 102: break;
        case 41: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Bloque, yychar, yyline, yytext());
          }
        case 103: break;
        case 42: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CPersonaje, yychar, yyline, yytext());
          }
        case 104: break;
        case 43: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CElemento, yychar, yyline, yytext());
          }
        case 105: break;
        case 44: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CExtras2, yychar, yyline, yytext());
          }
        case 106: break;
        case 45: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CHeroe2, yychar, yyline, yytext());
          }
        case 107: break;
        case 46: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AParedes2, yychar, yyline, yytext());
          }
        case 108: break;
        case 47: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Enemigo, yychar, yyline, yytext());
          }
        case 109: break;
        case 48: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CParedes2, yychar, yyline, yytext());
          }
        case 110: break;
        case 49: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AVillanos2, yychar, yyline, yytext());
          }
        case 111: break;
        case 50: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Background, yychar, yyline, yytext());
          }
        case 112: break;
        case 51: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.AEscenario, yychar, yyline, yytext());
          }
        case 113: break;
        case 52: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Credito, yychar, yyline, yytext());
          }
        case 114: break;
        case 53: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Destruccion, yychar, yyline, yytext());
          }
        case 115: break;
        case 54: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CVillanos2, yychar, yyline, yytext());
          }
        case 116: break;
        case 55: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CEscenario, yychar, yyline, yytext());
          }
        case 117: break;
        case 56: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);;return new Symbol(simbolos.AFondo, yychar, yyline, yytext());
          }
        case 118: break;
        case 57: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.APersonaje2, yychar, yyline, yytext());
          }
        case 119: break;
        case 58: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CFondo, yychar, yyline, yytext());
          }
        case 120: break;
        case 59: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CPersonaje2, yychar, yyline, yytext());
          }
        case 121: break;
        case 60: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion(yytext());
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.Descripcion, yychar, yyline, yytext());
          }
        case 122: break;
        case 61: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("<configuration>");
			Menu.TablaSimbolos.add(errorLexico);	
			;return new Symbol(simbolos.AConfiguracion, yychar, yyline, yytext());
          }
        case 123: break;
        case 62: 
          { Errores errorLexico=new Errores();
			errorLexico.setTipo("Palabra Reservada");
			errorLexico.setLinea(yyline);
			errorLexico.setColumna(yychar);
			errorLexico.setDescripcion("</configuration>");
			Menu.TablaSimbolos.add(errorLexico);return new Symbol(simbolos.CConfiguracion, yychar, yyline, yytext());
          }
        case 124: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { 	return new Symbol(simbolos.EOF,new String("Fin del archivo"));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

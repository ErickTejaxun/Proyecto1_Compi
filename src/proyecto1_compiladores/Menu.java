/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1_compiladores;

import com.sun.glass.events.KeyEvent;
import java.awt.Graphics;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;

/**
 *
 * @author Erick
 */
public class Menu extends javax.swing.JFrame {

    public static String path;
    public JFileChooser seleccion;
    public File archivo;
    public FileReader fr;
    public  BufferedReader br;
    public Scanner s;
    public sintactico p;
    public static ArrayList<Errores> listaLexico=new ArrayList();
    public static ArrayList<Fondo> listaFondos=new ArrayList();
    public static ArrayList<Figura> listaFiguras=new ArrayList();
    public static ArrayList<Design> listaDesigns=new ArrayList();
    public static ArrayList<Errores> listaSintactico=new ArrayList();
    public static ArrayList<Errores> TablaSimbolos=new ArrayList();
    public static String imagenAUsar="";
    public static int altura=0;
    public static int anchura=0;
    public static String heroeAUsar="";
    public static String  [][] tablero; 
    public static int numero_personaje=0;
    public static int x_heroe=0;
    public static int y_heroe=0;
    public static boolean encontrado=false;
    public static int vida_heroe=0;
    public static boolean esbloque=false;
    public static boolean esbonus=false;
    public static boolean esvillano=false;
    public static int destruccion_villano_actual=0;
    public static int bonus_actual=0;
    public static boolean esmeta=false;
    
     
    
    
    public Menu() {
        initComponents();
       
             Area_edicion.addCaretListener(new CaretListener() {
            @Override
            public void caretUpdate(CaretEvent ce){
                int pos = ce.getDot();
                try {
                    int row = Area_edicion.getLineOfOffset(pos) + 1;
                    int col = pos - Area_edicion.getLineStartOffset(row - 1) + 1;
                    coordenadas.setText("Linea: " + row + ", " + "Columna: " + col);
                } catch (BadLocationException exc) {
                    System.out.println(exc);
                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Panel_nuevo = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Area_edicion = new javax.swing.JTextArea();
        coordenadas = new javax.swing.JLabel();
        Posiciones_error = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        Consola = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        Consola1 = new javax.swing.JTextArea();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        posiciones = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        posiciones1 = new javax.swing.JTextArea();
        Juego = new javax.swing.JPanel();
        TableroFinal = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        objetos_muestra = new javax.swing.JLabel();
        jScrollPane7 = new javax.swing.JScrollPane();
        descripcionobjetos = new javax.swing.JTextArea();
        adelante1 = new javax.swing.JButton();
        atras1 = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        fondos_muestra = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        descripcionfondos = new javax.swing.JTextArea();
        adelante2 = new javax.swing.JButton();
        atras2 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        personaje_muestra = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        descripcionmuestra = new javax.swing.JTextArea();
        adelante = new javax.swing.JButton();
        atras = new javax.swing.JButton();
        vida = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        Archivo_nuevo = new javax.swing.JMenuItem();
        Archivo_Abrir = new javax.swing.JMenuItem();
        Archivo_guardar_Como = new javax.swing.JMenuItem();
        Archivo_guardar = new javax.swing.JMenuItem();
        Archivo_salir = new javax.swing.JMenuItem();
        Ejecutar_compilar_configuracion = new javax.swing.JMenu();
        Ejecutar_Archivo_configuracion = new javax.swing.JMenuItem();
        Ejecutar_Archivo_cargaEscenario = new javax.swing.JMenuItem();
        Ejecutar_juego = new javax.swing.JMenuItem();
        Ejecutar_Errores = new javax.swing.JMenuItem();
        Ejecutar_Tabla_Simbolos = new javax.swing.JMenuItem();
        Ayuda = new javax.swing.JMenu();
        Ayuda_Usuario = new javax.swing.JMenuItem();
        Ayuda_Tecnico = new javax.swing.JMenuItem();
        Ayuda_Acerca = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Game Solution");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Panel_nuevo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                Panel_nuevoKeyPressed(evt);
            }
        });

        jPanel1.setLayout(null);

        Area_edicion.setColumns(20);
        Area_edicion.setRows(5);
        jScrollPane1.setViewportView(Area_edicion);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(0, 10, 620, 240);

        coordenadas.setText("Linea:0, Columna:0");
        jPanel1.add(coordenadas);
        coordenadas.setBounds(0, 250, 180, 20);

        jPanel2.setLayout(null);

        Consola.setColumns(20);
        Consola.setRows(5);
        jScrollPane3.setViewportView(Consola);

        jPanel2.add(jScrollPane3);
        jScrollPane3.setBounds(0, 0, 620, 180);
        jPanel2.add(jPanel5);
        jPanel5.setBounds(110, -10, 10, 10);

        Posiciones_error.addTab("Operaciones", jPanel2);

        Consola1.setColumns(20);
        Consola1.setRows(5);
        jScrollPane4.setViewportView(Consola1);

        Posiciones_error.addTab("Errores", jScrollPane4);

        jPanel6.setLayout(null);

        posiciones.setColumns(20);
        posiciones.setRows(5);
        jScrollPane5.setViewportView(posiciones);

        jPanel6.add(jScrollPane5);
        jScrollPane5.setBounds(0, 0, 570, 160);

        Posiciones_error.addTab("Posiciones", jPanel6);

        posiciones1.setColumns(20);
        posiciones1.setRows(5);
        jScrollPane6.setViewportView(posiciones1);

        Posiciones_error.addTab("Posiciones -error", jScrollPane6);

        jPanel1.add(Posiciones_error);
        Posiciones_error.setBounds(10, 280, 580, 190);

        Panel_nuevo.addTab("EdiciÃ³n", jPanel1);

        Juego.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                JuegoKeyPressed(evt);
            }
        });
        Juego.setLayout(null);
        Panel_nuevo.addTab("Visualizacion", Juego);
        Panel_nuevo.addTab("Fondo", TableroFinal);

        jPanel4.setLayout(null);

        jPanel7.setLayout(null);

        jLabel2.setText("Objetos");
        jPanel7.add(jLabel2);
        jLabel2.setBounds(40, 20, 180, 20);
        jPanel7.add(objetos_muestra);
        objetos_muestra.setBounds(40, 70, 110, 100);

        descripcionobjetos.setColumns(20);
        descripcionobjetos.setRows(5);
        jScrollPane7.setViewportView(descripcionobjetos);

        jPanel7.add(jScrollPane7);
        jScrollPane7.setBounds(10, 250, 240, 200);

        adelante1.setText(">");
        adelante1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adelante1ActionPerformed(evt);
            }
        });
        jPanel7.add(adelante1);
        adelante1.setBounds(160, 190, 60, 40);

        atras1.setText("<");
        atras1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras1ActionPerformed(evt);
            }
        });
        jPanel7.add(atras1);
        atras1.setBounds(20, 190, 60, 40);

        jPanel4.add(jPanel7);
        jPanel7.setBounds(280, 10, 260, 500);

        jPanel8.setLayout(null);

        jLabel3.setText("Fondos");
        jPanel8.add(jLabel3);
        jLabel3.setBounds(40, 20, 180, 20);
        jPanel8.add(fondos_muestra);
        fondos_muestra.setBounds(40, 70, 110, 100);

        descripcionfondos.setColumns(20);
        descripcionfondos.setRows(5);
        jScrollPane8.setViewportView(descripcionfondos);

        jPanel8.add(jScrollPane8);
        jScrollPane8.setBounds(10, 250, 240, 200);

        adelante2.setText(">");
        adelante2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adelante2ActionPerformed(evt);
            }
        });
        jPanel8.add(adelante2);
        adelante2.setBounds(160, 190, 60, 40);

        atras2.setText("<");
        atras2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atras2ActionPerformed(evt);
            }
        });
        jPanel8.add(atras2);
        atras2.setBounds(20, 190, 60, 40);

        jPanel4.add(jPanel8);
        jPanel8.setBounds(0, 10, 260, 500);

        Panel_nuevo.addTab("Objetos Declarados", jPanel4);

        getContentPane().add(Panel_nuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 670, 510));

        jPanel3.setLayout(null);

        jLabel1.setText("Personajes");
        jPanel3.add(jLabel1);
        jLabel1.setBounds(40, 20, 180, 20);
        jPanel3.add(personaje_muestra);
        personaje_muestra.setBounds(40, 70, 110, 100);

        descripcionmuestra.setColumns(20);
        descripcionmuestra.setRows(5);
        jScrollPane2.setViewportView(descripcionmuestra);

        jPanel3.add(jScrollPane2);
        jScrollPane2.setBounds(10, 250, 240, 200);

        adelante.setText(">");
        adelante.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adelanteActionPerformed(evt);
            }
        });
        jPanel3.add(adelante);
        adelante.setBounds(160, 190, 60, 40);

        atras.setText("<");
        atras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atrasActionPerformed(evt);
            }
        });
        jPanel3.add(atras);
        atras.setBounds(20, 190, 60, 40);
        jPanel3.add(vida);
        vida.setBounds(170, 10, 70, 30);

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 260, 460));

        jMenuBar1.setEnabled(false);

        jMenu1.setText("Archivo");

        Archivo_nuevo.setText("Nuevo");
        Archivo_nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Archivo_nuevoActionPerformed(evt);
            }
        });
        jMenu1.add(Archivo_nuevo);

        Archivo_Abrir.setText("Abrir");
        Archivo_Abrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Archivo_AbrirActionPerformed(evt);
            }
        });
        jMenu1.add(Archivo_Abrir);

        Archivo_guardar_Como.setText("Guardar como");
        Archivo_guardar_Como.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Archivo_guardar_ComoActionPerformed(evt);
            }
        });
        jMenu1.add(Archivo_guardar_Como);

        Archivo_guardar.setText("Guardar");
        Archivo_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Archivo_guardarActionPerformed(evt);
            }
        });
        jMenu1.add(Archivo_guardar);

        Archivo_salir.setText("Salir");
        jMenu1.add(Archivo_salir);

        jMenuBar1.add(jMenu1);

        Ejecutar_compilar_configuracion.setText("Ejecutar");

        Ejecutar_Archivo_configuracion.setText("Compilar archivo de configuraciÃ³n");
        Ejecutar_Archivo_configuracion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ejecutar_Archivo_configuracionActionPerformed(evt);
            }
        });
        Ejecutar_compilar_configuracion.add(Ejecutar_Archivo_configuracion);

        Ejecutar_Archivo_cargaEscenario.setText("Compilar archivo de Carga de Escenario");
        Ejecutar_Archivo_cargaEscenario.setEnabled(false);
        Ejecutar_Archivo_cargaEscenario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ejecutar_Archivo_cargaEscenarioActionPerformed(evt);
            }
        });
        Ejecutar_compilar_configuracion.add(Ejecutar_Archivo_cargaEscenario);

        Ejecutar_juego.setText("Ejecutar Juego");
        Ejecutar_juego.setEnabled(false);
        Ejecutar_juego.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ejecutar_juegoActionPerformed(evt);
            }
        });
        Ejecutar_compilar_configuracion.add(Ejecutar_juego);

        Ejecutar_Errores.setText("Errores");
        Ejecutar_Errores.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ejecutar_ErroresActionPerformed(evt);
            }
        });
        Ejecutar_compilar_configuracion.add(Ejecutar_Errores);

        Ejecutar_Tabla_Simbolos.setText("Tabla de SÃ­mbolos");
        Ejecutar_Tabla_Simbolos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ejecutar_Tabla_SimbolosActionPerformed(evt);
            }
        });
        Ejecutar_compilar_configuracion.add(Ejecutar_Tabla_Simbolos);

        jMenuBar1.add(Ejecutar_compilar_configuracion);

        Ayuda.setText("Ayuda");

        Ayuda_Usuario.setText("Manual de Usuario");
        Ayuda_Usuario.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ayuda_UsuarioActionPerformed(evt);
            }
        });
        Ayuda.add(Ayuda_Usuario);

        Ayuda_Tecnico.setText("Manual TÃ©cnico");
        Ayuda_Tecnico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ayuda_TecnicoActionPerformed(evt);
            }
        });
        Ayuda.add(Ayuda_Tecnico);

        Ayuda_Acerca.setText("Acerca de");
        Ayuda_Acerca.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Ayuda_AcercaActionPerformed(evt);
            }
        });
        Ayuda.add(Ayuda_Acerca);

        jMenuBar1.add(Ayuda);

        setJMenuBar(jMenuBar1);

        setBounds(0, 0, 959, 587);
    }// </editor-fold>//GEN-END:initComponents

    private void Archivo_nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Archivo_nuevoActionPerformed
        path="";
        Area_edicion.setText("");
        this.setTitle(path+"Nuevo"+" Game Solution");
    }//GEN-LAST:event_Archivo_nuevoActionPerformed

    private void Archivo_AbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Archivo_AbrirActionPerformed
        seleccion =new JFileChooser();
        FileNameExtensionFilter filtro=new FileNameExtensionFilter("xconf","xconf");
        seleccion.setFileFilter(filtro);
        seleccion.setFileSelectionMode(JFileChooser.FILES_ONLY);
        int resultado= seleccion.showOpenDialog(this);
        if(resultado==JFileChooser.APPROVE_OPTION){
            File nombre=seleccion.getSelectedFile();
            path=nombre.toString();
            String url=seleccion.getSelectedFile().getAbsolutePath();
            
            this.setTitle(url);
            
            try {
         archivo = new File (path);
         fr = new FileReader (archivo);
         br = new BufferedReader(fr);
         Area_edicion.setText("");
         String linea;
         while((linea=br.readLine())!=null){
         String texto=Area_edicion.getText();
         if(Area_edicion.getText().equals("")){texto+=linea;}else{
         texto+="\n"+linea;}
         Area_edicion.setText(texto);
         }
         
         path=seleccion.getSelectedFile().getParent()+"\\";
         
      }
      catch(Exception e){
      }finally{
         
         try{                   
            if( null != fr ){  
               fr.close();    
            }                 
         }catch (Exception e2){
            
         }
      }
          
 
        }
    }//GEN-LAST:event_Archivo_AbrirActionPerformed

    private void Archivo_guardar_ComoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Archivo_guardar_ComoActionPerformed
    try {
        
        if(!this.getTitle().equals(path)){
        seleccion =new JFileChooser();
        seleccion.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int resultado= seleccion.showOpenDialog(this);
        if(resultado==JFileChooser.APPROVE_OPTION){
        File nombre=seleccion.getSelectedFile();
        String nombrenuevo=seleccion.getToolTipText();
        
        path=nombre.toString()+".xconf";
        guardarnuevo();
        this.setTitle(path);
        JOptionPane.showMessageDialog(null, "Archivo Guardado");
        }
        
        
    }else{
    path=this.getTitle();
   
        guardarnuevo();
        JOptionPane.showMessageDialog(null, "Cambios Guardados");
 
    }
        
           } catch (FileNotFoundException ex) {
        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
    }
        
        
        
    }//GEN-LAST:event_Archivo_guardar_ComoActionPerformed

    private void Archivo_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Archivo_guardarActionPerformed
        try {
        
        path=this.getTitle();   
        guardarnuevo();
        JOptionPane.showMessageDialog(null, "Cambios Guardados");
 
    
        
           } catch (FileNotFoundException ex) {
        Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
    }
    }//GEN-LAST:event_Archivo_guardarActionPerformed

    private void Ejecutar_Archivo_configuracionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ejecutar_Archivo_configuracionActionPerformed
           limpiar();
           personaje_muestra.setVisible(false);
           fondos_muestra.setVisible(false);
           objetos_muestra.setVisible(false);
           descripcionmuestra.setText("");
        
        try {
            
            path=this.getTitle();
            
            guardarnuevo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try {
             String Area=Area_edicion.getText();
         
//             new sintactico(new Scanner(new BufferedReader(new StringReader(Area)))).parse();
//             listaLexico=Proyecto1_Compiladores.listaLexico;
             
             
//             new sintactico(new Scanner(new BufferedReader(new StringReader(Area)))).parse();
             
            s=new Scanner(new java.io.FileReader(path)); 
              
            p = new sintactico(s);
            p.parse();
            Consola1.setText(p.textoConsola1);
            
            listaLexico=Proyecto1_Compiladores.listaLexico;
            listaSintactico=Proyecto1_Compiladores.listaSintactico;
            if(listaLexico.size()>0){
            for(int x=0;x<listaLexico.size();x++){Consola1.setText(Consola1.getText()+ "\n  Error lexico "+listaLexico.get(x).texto +" linea:"+listaLexico.get(x).linea+" columna:"+listaLexico.get(x).columna+" lexema"+listaLexico.get(x).descripcion);}
            Consola.setText("El archivo tiene errores lexicos");
            }
            if(listaSintactico.size()>0){
            for(int x=0;x<listaSintactico.size();x++){Consola1.setText(Consola1.getText()+ "\n  Error Sintactico "+listaSintactico.get(x).texto +" linea:"+listaSintactico.get(x).linea+" columna:"+listaSintactico.get(x).columna+" lexema"+listaLexico.get(x).descripcion);}
            Consola.setText(Consola.getText()+" \n El archivo tiene errores Sintactico");
            }
            if((listaSintactico.size()==0)&&(listaLexico.size()==0)){            
            int size=listaFondos.size();
            int size2=listaFiguras.size();
            int size3=listaDesigns.size();
            Ejecutar_Archivo_cargaEscenario.setEnabled(true);
            mostrarpersonaje(0);
            mostrarobjeto(0);
            mostrarfondo(0);
            personaje_muestra.setVisible(true);
            fondos_muestra.setVisible(true);
            objetos_muestra.setVisible(true);
            for(int x=0;x<size;x++){Consola.setText(Consola.getText()+"\n Fondo" + (x+1) +" "+ listaFondos.get(x).nombre +" "+ listaFondos.get(x).url );}
            for(int x=0;x<size2;x++){Consola.setText(Consola.getText()+"\n Personajes" + (x+1) +" "+ listaFiguras.get(x).nombre +" "+ listaFiguras.get(x).url );}
            for(int x=0;x<size3;x++){Consola.setText(Consola.getText()+"\n Designs" + (x+1) +" "+ listaDesigns.get(x).nombre +" "+ listaDesigns.get(x).url );}
            }
            
            
            
            
           
        }
        catch(Exception e) { System.out.println(e.getMessage());}
    
           
    }//GEN-LAST:event_Ejecutar_Archivo_configuracionActionPerformed
    public void montarfondo(String imagen){
        String pathtemporal="";
        for(int g=0;g<listaFondos.size();g++){
            if(listaFondos.get(g).nombre.equals(imagen)){
            pathtemporal=listaFondos.get(g).url;
                ImageIcon fondo = new ImageIcon(listaFondos.get(g).url); 
                Icon icono = new ImageIcon(fondo.getImage().getScaledInstance(TableroFinal.getWidth(), 
                                                               TableroFinal.getHeight(), 
                                                               Image.SCALE_DEFAULT));
               TableroFinal.setIcon(fondo);
               
               JLabel nuevo=new JLabel();
               nuevo.setBounds(0,0,665,483);
               nuevo.setIcon(icono);
               Juego.add(nuevo);
               Juego.repaint();
               TableroFinal.setIcon(fondo);
//               TableroFinal1.setIcon(fondo);
            }
         }
        
        }
      

    
    public void mostrarpersonaje(int x){
    ImageIcon imagen = new ImageIcon(listaFiguras.get(x).url); 
    Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(personaje_muestra.getWidth(), 
                                                               personaje_muestra.getHeight(), 
                                                               Image.SCALE_DEFAULT));
    personaje_muestra.setIcon(icono); 
    String tipo="";
    if(listaFiguras.get(x).tipo==1){tipo="Heroe";}
    if(listaFiguras.get(x).tipo==2){tipo="Enemigo";}
    descripcionmuestra.setText("");
    descripcionmuestra.setText("Nombre "+listaFiguras.get(x).nombre);
    descripcionmuestra.setText(descripcionmuestra.getText()+"\n Tipo "+tipo);
    descripcionmuestra.setText(descripcionmuestra.getText()+"\n Vida "+listaFiguras.get(x).vida);
    descripcionmuestra.setText(descripcionmuestra.getText()+"\n Destruccion "+listaFiguras.get(x).destruccion);
    descripcionmuestra.setText(descripcionmuestra.getText()+"\n Destruccion "+listaFiguras.get(x).descripcion);
    }
    
    public void mostrarfondo(int x){
    ImageIcon imagen = new ImageIcon(listaFondos.get(x).url); 
    Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(fondos_muestra.getWidth(), 
                                                               fondos_muestra.getHeight(), 
                                                               Image.SCALE_DEFAULT));
    fondos_muestra.setIcon(icono); 
    
    descripcionfondos.setText("");
    descripcionfondos.setText("Nombre "+listaFondos.get(x).nombre);
    descripcionfondos.setText(descripcionfondos.getText()+"\n Path "+listaFondos.get(x).url);

    }
        
        public void mostrarobjeto(int x){
    ImageIcon imagen = new ImageIcon(listaDesigns.get(x).url); 
    Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(objetos_muestra.getWidth(), 
                                                               objetos_muestra.getHeight(), 
                                                               Image.SCALE_DEFAULT));
    objetos_muestra.setIcon(icono); 
    
    descripcionobjetos.setText("");
    String tipo="";
    descripcionobjetos.setText("Nombre "+listaDesigns.get(x).nombre);
    if(listaDesigns.get(x).tipo==1){
    tipo="Bomba";
    }
    if(listaDesigns.get(x).tipo==2){
    tipo="Arma";
    }
     if(listaDesigns.get(x).tipo==3){
    tipo="Bonus";
    }
       if(listaDesigns.get(x).tipo==4){
    tipo="Bloque";
    }
           if(listaDesigns.get(x).tipo==5){
    tipo="Meta";
    }
    descripcionobjetos.setText(descripcionobjetos.getText()+"\n Tipo "+tipo);
    descripcionobjetos.setText(descripcionobjetos.getText()+"\n Destruccion "+listaDesigns.get(x).destruir);
    descripcionobjetos.setText(descripcionobjetos.getText()+"\n Creditos "+listaDesigns.get(x).creditos);
    }    
    
        
        
        
        
    
    private void Ayuda_AcercaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ayuda_AcercaActionPerformed
       JOptionPane.showMessageDialog(null," Erick Roberto TejaxÃºn XicÃ³n 201213050 OLC1 2015");
    }//GEN-LAST:event_Ayuda_AcercaActionPerformed

    private void Ejecutar_Tabla_SimbolosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ejecutar_Tabla_SimbolosActionPerformed
        String directorioHtml="C:\\Users\\Erick\\Desktop\\TablaSimbolo.html";
        
        if(TablaSimbolos.isEmpty()){
            JOptionPane.showMessageDialog(this,"La tabla de simbolos esta vacia");
            
        }else{
            File html=new File(directorioHtml);
            PrintWriter writer;
            
            try {
                writer=new PrintWriter(html);
                String texto="<html>\n"
                    + "<head>\n" + "<title>Compiladores 1</title>\n" + "</head>\n"
                    + "<body>\n"
                    + "<h1 align=\"center\">Tabla de Simbolos </h1>\n"
                    + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                    + "<table border=\"1\">\n"
                    + "<tr>\n"
                    + "<td>No.</td>\n"
                    + "<td>Linea</td>\n"
                    + "<td>Columna</td>\n"
                    + "<td>Descripcion</td>\n"
                        + "<td>Lexema</td>\n";
                
                       for(int x=0;x<TablaSimbolos.size();x++){
                           
                           
                    texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>"+TablaSimbolos.get(x).linea+"</td>\n"
                    + "<td>"+TablaSimbolos.get(x).columna+"</td>\n"
                    + "<td>"+TablaSimbolos.get(x).tipo+"</td>\n"
                    + "<td>"+TablaSimbolos.get(x).descripcion+"</td>\n";
                       }
                    texto+="</tr>\n"+                    
                    "</table>\n"
                    + "</body>"
                    + "</html>";
                writer.print(texto);
                writer.close();
                 abrirHtml(directorioHtml);
            } catch (FileNotFoundException ex) {
               
            }
        }  
        
        
        String directorioHtml2="C:\\Users\\Erick\\Desktop\\TablaSimbolo2.html";
        
        if(listaFondos.isEmpty()&& listaFiguras.isEmpty()&& listaDesigns.isEmpty()){
            JOptionPane.showMessageDialog(this,"No se han declarado los objetos para el juego.");
            
        }else{
            File html=new File(directorioHtml2);
            PrintWriter writer;
            
            try {
                writer=new PrintWriter(html);
                String texto="<html>\n"
                    + "<head>\n" + "<title>Compiladores 1</title>\n" + "</head>\n"
                    + "<body>\n"
                    + "<h1 align=\"center\">Tabla de Simbolos de declaraciones </h1>\n"
                    + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                    + "<table border=\"1\">\n"
                    + "<tr>\n"
                    + "<td>No.</td>\n"
                    + "<td>Clase</td>\n"
                    + "<td>Nombre</td>\n"
                    + "<td>Tipo</td>\n"
                    + "<td>Path</td>\n"
                    + "<td>Vida</td>\n"
                    + "<td>DestrucciÃ³n</td>\n"
                    + "<td>DescripciÃ³n</td>\n"
                    + "<td>CrÃ©ditos</td>\n";
                
                       for(int x=0;x<listaFondos.size();x++){
               texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>Fondo</td>\n"
                    + "<td>"+listaFondos.get(x).nombre+"</td>\n"
                    + "<td>--------</td>\n"
                    + "<td>"+listaFondos.get(x).url+"</td>\n"
                    + "<td>--------</td>\n"
                    + "<td>--------</td>\n"
                    + "<td>--------</td>\n"
                    + "<td>--------</td>\n";
                       }
                    for(int x=0;x<listaDesigns.size();x++){
   String tipo="";
              if(listaDesigns.get(x).tipo==1){
    tipo="Bomba";
    }
    if(listaDesigns.get(x).tipo==2){
    tipo="Arma";
    }
     if(listaDesigns.get(x).tipo==3){
    tipo="Bonus";
    }
       if(listaDesigns.get(x).tipo==4){
    tipo="Bloque";
    }
           if(listaDesigns.get(x).tipo==5){
    tipo="Meta";
    }
                        
                        
               texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>Objeto</td>\n"
                    + "<td>"+listaDesigns.get(x).nombre+"</td>\n"
                    + "<td>"+tipo+"</td>\n"
                    + "<td>"+listaDesigns.get(x).url+"</td>\n"
                    + "<td>--------------</td>\n"
                    + "<td>--------------</td>\n"
                    + "<td>---------------</td>\n"
                    + "<td>"+listaDesigns.get(x).creditos +"</td>\n";
                       }
                    for(int x=0;x<listaFiguras.size();x++){
                           String tipo="";
                      if(listaFiguras.get(x).tipo==1){
                      tipo="Heroe";
                      }
                      if(listaFiguras.get(x).tipo==2){
                      tipo="Villano";
                      }
                        
                        
               texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>Personaje</td>\n"
                    + "<td>"+listaFiguras.get(x).nombre+"</td>\n"
                    + "<td>"+tipo+"</td>\n"
                    + "<td>"+listaFiguras.get(x).url+"</td>\n"
                    + "<td>"+listaFiguras.get(x).vida+"</td>\n"
                    + "<td>"+listaFiguras.get(x).destruccion+"</td>\n"
                    + "<td>"+listaFiguras.get(x).descripcion+"</td>\n"
                    + "<td>---------------</td>\n";
                       }
                    
                    
                    texto+="</tr>\n"+                    
                    "</table>\n"
                    + "</body>"
                    + "</html>";
                writer.print(texto);
                writer.close();
                 abrirHtml(directorioHtml);
            } catch (FileNotFoundException ex) {
               
            }
        }  
        
        
        
        
        
        
        
    }//GEN-LAST:event_Ejecutar_Tabla_SimbolosActionPerformed
        public void abrirHtml(String pPath){
        try {

            String[] cmd = new String[5];
            // interprete de comandos de windows, cmd.exe 
            cmd[0] = "cmd";

            // 1er parametro /C le indica a cmd que ejecute el comando a continuacion
            cmd[1] = "/C";

            // 2do parametro start es el programa que abre cualquier archivo
            // con su programa asociado
            cmd[2] = "start";
            // por ejemplo, si en una consola escribimos,
            // start uno.txt se abre notepad con el archivo abierto. 

            cmd[3] = "\"\""; // titulo de la ventana

            cmd[4] = "\"" + pPath + "\""; // path del archivo que deseamos abrir

            Runtime rt = Runtime.getRuntime();

            rt.exec(cmd);

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

    }
    private void Ejecutar_Archivo_cargaEscenarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ejecutar_Archivo_cargaEscenarioActionPerformed
     try {
            
            path=this.getTitle();
            Consola.setText("");
            Consola1.setText("");
            posiciones.setText("");
            listaLexico.isEmpty();
            listaSintactico.isEmpty();
            
        for(int x=0;x<altura;x++){     
       
        for(int y=0;y<anchura;y++){
        
        tablero[x][y]=null;
        sintactico.tablero[x][y]=null;
        }
    }
            
            
            guardarnuevo();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
        
         try {
             String Area=Area_edicion.getText();
         
//             new sintactico(new Scanner(new BufferedReader(new StringReader(Area)))).parse();
//             listaLexico=Proyecto1_Compiladores.listaLexico;
             
             
//             new sintactico(new Scanner(new BufferedReader(new StringReader(Area)))).parse();
             
            s=new Scanner(new java.io.FileReader(path)); 
              
            p = new sintactico(s);
            p.parse();
            Consola1.setText(p.textoConsola1);
            
            listaLexico=Proyecto1_Compiladores.listaLexico;
            listaSintactico=Proyecto1_Compiladores.listaSintactico;
            if(listaLexico.size()>0){
            for(int x=0;x<listaLexico.size();x++){Consola1.setText(Consola1.getText()+ "\n "+" Tipo "+listaLexico.get(x).tipo+" "+listaLexico.get(x).texto +" linea:"+listaLexico.get(x).columna+" columna:"+listaLexico.get(x).linea+" Descripcion "+listaLexico.get(x).descripcion);}
            Consola.setText("El archivo tiene errores lexicos o Semanticos");
            }
            if(listaSintactico.size()>0){
            for(int x=0;x<listaSintactico.size();x++){Consola1.setText(Consola1.getText()+ "\n  Error Sintactico "+listaSintactico.get(x).texto +" linea:"+listaSintactico.get(x).linea+" columna:"+listaSintactico.get(x).columna);}
            Consola.setText(Consola.getText()+" \n El archivo tiene errores Sintactico");
            }
            if((listaSintactico.size()==0)&&(listaLexico.size()==0)){            
            int size=listaFondos.size();
            int size2=listaFiguras.size();
            int size3=listaDesigns.size();
    for(int x=0;x<altura;x++){
        System.out.print("\n");
        posiciones.setText(posiciones.getText()+"\n");
        for(int y=0;y<anchura;y++){
        System.out.print("|"+tablero[x][y]);
        posiciones.setText(posiciones.getText()+"|"+tablero[x][y]);
        }
    }
            for(int x=0;x<size;x++){Consola.setText(Consola.getText()+"\n Fondo" + (x+1) +" "+ listaFondos.get(x).nombre +" "+ listaFondos.get(x).url );}
            for(int x=0;x<size2;x++){Consola.setText(Consola.getText()+"\n Personajes" + (x+1) +" "+ listaFiguras.get(x).nombre +" "+ listaFiguras.get(x).url );}
            for(int x=0;x<size3;x++){Consola.setText(Consola.getText()+"\n Designs" + (x+1) +" "+ listaDesigns.get(x).nombre +" "+ listaDesigns.get(x).url );}
            }
            
            
            
            
           
        }
     catch(Exception e) { System.out.println(e.getMessage());}
    System.out.println("////////////////////////////");
    System.out.println("Heroe :"+heroeAUsar);
    System.out.println("Fondo :"+imagenAUsar);
//    montarfondo(imagenAUsar);
    System.out.println("Numero de filas " + altura);
    System.out.println("Numero columnas "+anchura);
    posiciones1.setText(posiciones1.getText()+"\n"+"Numero de filas " + altura+ "\n Numero columnas "+anchura);
    posiciones.setText(posiciones.getText()+"\n"+"Numero de filas " + altura+ "\n Numero columnas "+anchura);
//    
//    int temp_filas=tablero.length;
//    int temp_columnas=tablero[0].length;
//    
//    if(altura<temp_filas){
//    JOptionPane.showMessageDialog(this,"El numero de filas declarado en el archivo es insuficiente para posicionar los objetos");
//    }
//    if(altura<temp_filas){
//    JOptionPane.showMessageDialog(this,"El numero de columnas declarado en el archivo es insuficiente para posicionar los objetos");
//    }
//    
    for(int x=0;x<altura;x++){
        System.out.print("\n");
        posiciones1.setText(posiciones1.getText()+"\n");
        for(int y=0;y<anchura;y++){
        System.out.print("|"+tablero[x][y]);
        posiciones1.setText(posiciones1.getText()+"|"+tablero[x][y]);
        }
Ejecutar_juego.setEnabled(true);
    }
    
     posiciones1.setText(posiciones1.getText()+"\n |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||");
    }//GEN-LAST:event_Ejecutar_Archivo_cargaEscenarioActionPerformed

    private void atrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atrasActionPerformed
       int cantidad_personajes=listaFiguras.size();
       if(numero_personaje==0){
           numero_personaje=cantidad_personajes-1;
       mostrarpersonaje(numero_personaje);
       }else{
        numero_personaje=numero_personaje-1;
       mostrarpersonaje(numero_personaje);
    }
    }//GEN-LAST:event_atrasActionPerformed
    public void graficar(){
    int ancho_label=TableroFinal.getWidth();
    int altura_label=TableroFinal.getHeight();
   JLabel[][] objetos_tablero=new JLabel[altura][anchura];
    
 
    
    int ancho_bloque=ancho_label/anchura;
    int altura_bloque=altura_label/altura;
    
        for(int x=0;x<anchura;x++){
            for(int y=0;y<altura;y++){
                 String url=buscar(tablero[x][y]);
                  jLabel1 = new javax.swing.JLabel();
                  jLabel1.setBounds(ancho_bloque*x, altura_bloque*y,ancho_bloque,altura_bloque );
                  ImageIcon imagen = new ImageIcon(url); 
                    Icon icono = new ImageIcon(imagen.getImage().getScaledInstance(ancho_bloque, 
                                                               altura_bloque, 
                                                               Image.SCALE_DEFAULT));
                           jLabel1.setIcon(icono);
                           objetos_tablero[x][y]=jLabel1;
//                           nuevo.add(this.Juego);
                           Juego.add(objetos_tablero[x][y]);
                          
                           Juego.repaint();
                           jLabel1.repaint();
                           
                           if(encontrado==true){
                               
                           System.out.println(x +","+y);
                           x_heroe=x;
                           y_heroe=y;
                           encontrado=false;
                           }
                         
                  
                  
            }

        }
//    Ejecutable nuevo=new Ejecutable();
//    nuevo.show(true);
//    nuevo.setLayout(null);
//     nuevo.objetos=objetos_tablero;   
    }

    
    public static String buscar(String nombre){
    String path="";
    
    for(int x=0;x<listaFiguras.size();x++){
        if(listaFiguras.get(x).nombre.equals(nombre)){
        path=listaFiguras.get(x).url; 
        
        if(listaFiguras.get(x).tipo==1){
        encontrado=true;
        heroeAUsar=listaFiguras.get(x).nombre;
        System.out.println(heroeAUsar);
        vida_heroe=listaFiguras.get(x).vida;
        }
         if(listaFiguras.get(x).tipo==2){
        esvillano=true;
        destruccion_villano_actual=listaFiguras.get(x).destruccion;
        }
        
        
        }
    }
        for(int x=0;x<listaDesigns.size();x++){
        if(listaDesigns.get(x).nombre.equals(nombre)){
        path=listaDesigns.get(x).url;   
        

        
        
        
        }
    }
    
    return path;
    }
    
    
    
    
    
    
    public static void verificarestados(String nombre){
       
    for(int x=0;x<listaFiguras.size();x++){
        if(listaFiguras.get(x).nombre.equals(nombre)){
       
        
        if(listaFiguras.get(x).tipo==1){
        encontrado=true;
        heroeAUsar=listaFiguras.get(x).nombre;
        System.out.println(heroeAUsar);
        vida_heroe=listaFiguras.get(x).vida;
        }
         if(listaFiguras.get(x).tipo==2){
        esvillano=true;
        destruccion_villano_actual=listaFiguras.get(x).destruccion;
        }
        
        
        }
    }
        for(int x=0;x<listaDesigns.size();x++){
        if(listaDesigns.get(x).nombre.equals(nombre)){
        path=listaDesigns.get(x).url;   
        
        if(listaDesigns.get(x).tipo==1){
        esvillano=true;
        destruccion_villano_actual=listaDesigns.get(x).destruir;
        }
        
        if(listaDesigns.get(x).tipo==3){
        esbonus=true;
        bonus_actual=listaDesigns.get(x).creditos;
        }
        if(listaDesigns.get(x).tipo==4){
        esbloque=true;
        }
        if(listaDesigns.get(x).tipo==5){
        esmeta=true;
       
        }
        
        
        
        }
    }

    }
    
    
    
    
    
    
    
    
    
    private void adelanteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adelanteActionPerformed
         int cantidad_personajes=listaFiguras.size();
       if(numero_personaje==cantidad_personajes-1){
           numero_personaje=0;
       mostrarpersonaje(numero_personaje);
       }else{
        numero_personaje=numero_personaje+1;
       mostrarpersonaje(numero_personaje);
    }
    }//GEN-LAST:event_adelanteActionPerformed


    private void Ejecutar_ErroresActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ejecutar_ErroresActionPerformed
      String directorioHtml="C:\\Users\\Erick\\Desktop\\Errores.html";
        
        if(listaLexico.isEmpty() && listaSintactico.isEmpty()){
            JOptionPane.showMessageDialog(this,"No hay errores :v");
            
        }else{
            File html=new File(directorioHtml);
            PrintWriter writer;
            
            try {
                writer=new PrintWriter(html);
                String texto="<html>\n"
                    + "<head>\n" + "<title>ARCHIVO DE ERRORES</title>\n" + "</head>\n"
                    + "<body>\n"
                    + "<h1 align=\"center\">ERRORES LEXICOS| Sintactico| Semantico </h1>\n"
                    + "<hr width=\"75%\" size=\"2\" color=\"black\"/>"
                    + "<table border=\"1\">\n"
                    + "<tr>\n"
                    + "<td>No.</td>\n"
                    + "<td>Linea</td>\n"
                    + "<td>Columna</td>\n"
                    + "<td>Tipo</td>\n"
                        + "<td>Descripcion</td>\n";
                
                       for(int x=0;x<listaLexico.size();x++){
                       texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>"+listaLexico.get(x).linea+"</td>\n"
                    + "<td>"+listaLexico.get(x).columna+"</td>\n"
                    + "<td>"+listaLexico.get(x).tipo+"</td>\n"
                    + "<td>"+listaLexico.get(x).descripcion+"</td>\n";
                       }
                        for(int x=0;x<listaSintactico.size();x++){
                       texto+="</tr>\n"+ "<td>"+x+"</td>\n"
                    + "<td>"+listaSintactico.get(x).linea+"</td>\n"
                    + "<td>"+listaSintactico.get(x).columna+"</td>\n"
                    + "<td>"+listaSintactico.get(x).tipo+"</td>\n"
                    + "<td>"+listaSintactico.get(x).descripcion+"</td>\n";
                       }
                    texto+="</tr>\n"+                    
                    "</table>\n"
                    + "</body>"
                    + "</html>";
                writer.print(texto);
                writer.close();
                 abrirHtml(directorioHtml);
            } catch (FileNotFoundException ex) {
               
            }
        }       
    }//GEN-LAST:event_Ejecutar_ErroresActionPerformed

    private void Ayuda_UsuarioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ayuda_UsuarioActionPerformed
       abrirHtml("C:\\Users\\Erick\\Desktop\\Proyecto\\Usuario.pdf");
    }//GEN-LAST:event_Ayuda_UsuarioActionPerformed

    private void Ayuda_TecnicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ayuda_TecnicoActionPerformed
        abrirHtml("C:\\Users\\Erick\\Desktop\\Proyecto\\Tecnico.pdf");
    }//GEN-LAST:event_Ayuda_TecnicoActionPerformed

    private void Ejecutar_juegoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Ejecutar_juegoActionPerformed
      esvillano=false;
      esbonus=false;
      esbloque=false;
      esmeta=false;
        
        
      Juego.removeAll();
      graficar();
      montarfondo(imagenAUsar);
      vida.setText(String.valueOf(vida_heroe));
      
      
    }//GEN-LAST:event_Ejecutar_juegoActionPerformed

    private void adelante1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adelante1ActionPerformed
              int cantidad_personajes=listaDesigns.size();
       if(numero_personaje==cantidad_personajes-1){
           numero_personaje=0;
       mostrarobjeto(numero_personaje);
       }else{
        numero_personaje=numero_personaje+1;
       mostrarobjeto(numero_personaje);
    }
    }//GEN-LAST:event_adelante1ActionPerformed

    private void atras1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras1ActionPerformed
    int cantidad_fondos=listaDesigns.size();
       if(numero_personaje==0){
           numero_personaje=cantidad_fondos-1;
       mostrarobjeto(numero_personaje);
       }else{
        numero_personaje=numero_personaje-1;
       mostrarobjeto(numero_personaje);
    }         // TODO add your handling code here:
    }//GEN-LAST:event_atras1ActionPerformed

    private void adelante2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adelante2ActionPerformed
       int cantidad_personajes=listaFondos.size();
       if(numero_personaje==cantidad_personajes-1){
           numero_personaje=0;
       mostrarfondo(numero_personaje);
       }else{
        numero_personaje=numero_personaje+1;
       mostrarfondo(numero_personaje);
    }       
    }//GEN-LAST:event_adelante2ActionPerformed

    private void atras2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atras2ActionPerformed
     int cantidad_fondos=listaFondos.size();
       if(numero_personaje==0){
           numero_personaje=cantidad_fondos-1;
       mostrarfondo(numero_personaje);
       }else{
        numero_personaje=numero_personaje-1;
       mostrarfondo(numero_personaje);
    }        // TODO add your handling code here:
    }//GEN-LAST:event_atras2ActionPerformed

    private void JuegoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_JuegoKeyPressed
    
    }//GEN-LAST:event_JuegoKeyPressed

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed

    }//GEN-LAST:event_formKeyPressed

    private void Panel_nuevoKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_Panel_nuevoKeyPressed
     esvillano=false;
     esbonus=false;
     esmeta=false;
     esbloque=false;
        
      /*Tecla para arriba*/  
     if(evt.getKeyCode()==KeyEvent.VK_W){
     System.out.println("Arriba");
     verificarestados(tablero[x_heroe][y_heroe-1]);
      if(y_heroe==0){
       }else{    
          
       if(esvillano==true){
       tablero[x_heroe][y_heroe-1]=heroeAUsar;
       tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())-destruccion_villano_actual));
       esvillano=false;
       destruccion_villano_actual=0;
        y_heroe=y_heroe-1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbonus==true){
       tablero[x_heroe][y_heroe-1]=heroeAUsar;
       tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
       bonus_actual=0;
       y_heroe=y_heroe-1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbloque==true){
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
       }else
       if(esmeta==true){
      JOptionPane.showMessageDialog(this, "Juego Terminado");
       } else{
       tablero[x_heroe][y_heroe-1]=heroeAUsar;
       tablero[x_heroe][y_heroe]=null;
       y_heroe=y_heroe-1;
      Juego.removeAll();            
      graficar();
      montarfondo(imagenAUsar);
       
       } 
}
      
      
      
      }
     
     /*Boton bajar */
      if(evt.getKeyCode()==KeyEvent.VK_S){
          System.out.println("Abajo");
          verificarestados(tablero[x_heroe][y_heroe+1]);
     
      if(y_heroe==0){
       }else{
       if(esvillano==true){
        tablero[x_heroe][y_heroe+1]=heroeAUsar;
       tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())-destruccion_villano_actual));
       esvillano=false;
        y_heroe=y_heroe+1;
      Juego.removeAll();            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbonus==true){
     tablero[x_heroe][y_heroe+1]=heroeAUsar;
     tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
        x_heroe=x_heroe+1;
      Juego.removeAll();           
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbloque==true){
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
       }else
       if(esmeta==true){
      JOptionPane.showMessageDialog(this, "Juego Terminado");
       }else{
       
     tablero[x_heroe][y_heroe+1]=heroeAUsar;
     tablero[x_heroe][y_heroe]=null;
      x_heroe=x_heroe+1;
      Juego.removeAll();           
      graficar();
      montarfondo(imagenAUsar);
     
       }
           
      }
      
      }
      
      /*Derecha*/
      if(evt.getKeyCode()==KeyEvent.VK_D){
          System.out.println("derecha");
          verificarestados(tablero[x_heroe+1][y_heroe]);
      
    if(x_heroe==0){
       }else{
        if(esvillano==true){
            tablero[x_heroe+1][y_heroe]=heroeAUsar;
      tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())-destruccion_villano_actual));
       esvillano=false;
        x_heroe=x_heroe+1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbonus==true){
           tablero[x_heroe+1][y_heroe]=heroeAUsar;
      tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
        x_heroe=x_heroe+1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbloque==true){
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
       }else
       if(esmeta==true){
      JOptionPane.showMessageDialog(this, "Juego Terminado");
       } else{
       
       tablero[x_heroe+1][y_heroe]=heroeAUsar;
      tablero[x_heroe][y_heroe]=null;
        x_heroe=x_heroe+1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }
    }
      
      
      }
      if(evt.getKeyCode()==KeyEvent.VK_A){
          System.out.println("izquierda");
          verificarestados(tablero[x_heroe-1][y_heroe]);
    
     if(x_heroe==0){
       }else{
       if(esvillano==true){
        tablero[x_heroe-1][y_heroe]=heroeAUsar;
     tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())-destruccion_villano_actual));
       esvillano=false;
        x_heroe=x_heroe-1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbonus==true){
        tablero[x_heroe-1][y_heroe]=heroeAUsar;
     tablero[x_heroe][y_heroe]=null;
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
        x_heroe=x_heroe-1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
       }else
       if(esbloque==true){
       vida.setText(String.valueOf(Integer.valueOf(vida.getText())+bonus_actual));
       esvillano=false;
       }else
       if(esmeta==true){
      JOptionPane.showMessageDialog(this, "Juego Terminado");
       }else
       {tablero[x_heroe-1][y_heroe]=heroeAUsar;
     tablero[x_heroe][y_heroe]=null;}
         x_heroe=x_heroe-1;
      Juego.removeAll();
            
      graficar();
      montarfondo(imagenAUsar);
     }
      
      
      }
      perder();
      
      
    }//GEN-LAST:event_Panel_nuevoKeyPressed
public void perder(){
if(Integer.valueOf(vida.getText())<=0){
JOptionPane.showMessageDialog(null, "A perdido , intente de nuevo");

}
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    public void limpiar(){
            TablaSimbolos.clear();
            listaSintactico.clear();
            listaLexico.clear();
            listaFondos.clear();
            listaDesigns.clear();
            listaFiguras.clear();
            Consola.setText("");
            Consola1.setText("");
    
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem Archivo_Abrir;
    private javax.swing.JMenuItem Archivo_guardar;
    private javax.swing.JMenuItem Archivo_guardar_Como;
    private javax.swing.JMenuItem Archivo_nuevo;
    private javax.swing.JMenuItem Archivo_salir;
    private javax.swing.JTextArea Area_edicion;
    private javax.swing.JMenu Ayuda;
    private javax.swing.JMenuItem Ayuda_Acerca;
    private javax.swing.JMenuItem Ayuda_Tecnico;
    private javax.swing.JMenuItem Ayuda_Usuario;
    private javax.swing.JTextArea Consola;
    private javax.swing.JTextArea Consola1;
    private javax.swing.JMenuItem Ejecutar_Archivo_cargaEscenario;
    private javax.swing.JMenuItem Ejecutar_Archivo_configuracion;
    private javax.swing.JMenuItem Ejecutar_Errores;
    private javax.swing.JMenuItem Ejecutar_Tabla_Simbolos;
    private javax.swing.JMenu Ejecutar_compilar_configuracion;
    private javax.swing.JMenuItem Ejecutar_juego;
    public javax.swing.JPanel Juego;
    private javax.swing.JTabbedPane Panel_nuevo;
    private javax.swing.JTabbedPane Posiciones_error;
    public static javax.swing.JLabel TableroFinal;
    private javax.swing.JButton adelante;
    private javax.swing.JButton adelante1;
    private javax.swing.JButton adelante2;
    private javax.swing.JButton atras;
    private javax.swing.JButton atras1;
    private javax.swing.JButton atras2;
    private javax.swing.JLabel coordenadas;
    private javax.swing.JTextArea descripcionfondos;
    private javax.swing.JTextArea descripcionmuestra;
    private javax.swing.JTextArea descripcionobjetos;
    private javax.swing.JLabel fondos_muestra;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel objetos_muestra;
    private javax.swing.JLabel personaje_muestra;
    private javax.swing.JTextArea posiciones;
    private javax.swing.JTextArea posiciones1;
    private javax.swing.JLabel vida;
    // End of variables declaration//GEN-END:variables
public void guardarnuevo() throws FileNotFoundException{
                 PrintWriter writer = new PrintWriter(path);
                 String texto=Area_edicion.getText();
//                 System.out.println(texto);
                 writer.print(texto);
                 writer.close();
                
}


}
